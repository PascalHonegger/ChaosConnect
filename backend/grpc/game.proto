syntax = "proto3";

package api.game;

option java_package = "ch.chaosconnect.api.game";
option java_multiple_files = true;

// Enums

enum Faction {
  RED = 0;
  YELLOW = 1;
}

enum ColumnAction {
  ADD = 0;
  DISABLE = 1;
  DELETE = 2;
  CLEAR = 3;
}

enum PieceAction {
  PLACE = 0;
  SCORE = 1;
}

enum QueueAction {
  ENQUEUE = 0;
  DEQUEUE = 1;
}

enum PlayerAction {
  JOIN = 0;
  DISCONNECT = 1;
  UPDATE = 2;
}

// DTO

message Piece {
  string owner = 1;
  Faction faction = 2;
  bool scored = 3;
}

message PlayerState {
  string display_name = 1;
  Faction faction = 2;
  int64 score = 3;
}

message GameStateColumn {
  repeated Piece pieces = 1;
  repeated Piece queue = 2;
  bool disabled = 3;
}

message GameState {
  repeated GameStateColumn columns = 1;
  map<string, PlayerState> players = 2;
  int32 number_of_rows = 3;
}

// Events

message PieceState {
  int32 column = 1;
  int32 row = 2;
  Faction faction = 3;
  string owner = 4;
  PieceAction action = 5;
  bool scored = 6;
}

message PieceChanged {
  repeated PieceState pieces = 1;
}

message QueueState {
  int32 column = 1;
  Faction faction = 2;
  string owner = 3;
}

message QueueChanged {
  repeated QueueState pieces = 1;
}

message ColumnChanged {
  int32 position = 1;
  ColumnAction action = 2;
}

message PlayerChanged {
  string player = 1;
  PlayerAction action = 2;
  PlayerState state = 3;
}

message StartPlayingRequest {
  api.game.Faction faction = 1;
}

message PlacePieceRequest {
  int32 column = 1;
}

message GameUpdateEvent {
  oneof action {
    api.game.GameState game_state = 1;
    api.game.PieceChanged piece_changed = 2;
    api.game.QueueChanged queue_changed = 3;
    api.game.ColumnChanged column_changed = 4;
    api.game.PlayerChanged player_changed = 5;
  }
}
